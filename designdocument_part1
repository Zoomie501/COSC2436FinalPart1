# Initial Design Document:

**Title:** Record Collection Catalog System  
**Student:** Enrique Morell IV  
**Course:** COSC 2436 Fall 23  

## Object:

The object in this project will be a Vinyl Record. Each record is defined with four attributes:

- **Artist:** The name of the Artist of the record
- **Album:** The name of the album of the record
- **Year:** The year the record was released
- **Genre:** The genre of the album (Rock, Rap, Metal, etc.)

## Data Structures:

For managing the collection, I plan to use two data structures:

1. **Array List:** An Array List will be used to store the entire collection. This allows for efficient addition and removal of records from the collection, as well as the ability to access any record in the collection directly by its index.
2. **Hash Map:** A Hash Map will be used for quick search functionality. The key for the hash map will be the album name, and the value will be the record object itself. This will allow for constant-time complexity when searching for a record by its album name.

## Algorithms:

Two different search algorithms will be implemented:

- **Linear Search:** Will be used in conjunction with the Array List for searching for records by any attribute. Despite its O(n) time complexity, this is a simple and effective method when the Array List is not sorted.
- **Hashing:** In the Hash Map, the hash function will be used for searching records by artist. It provides a constant time complexity which makes it very efficient.

For sorting the collection, the Quick Sort algorithm will be used. This is because of its average time complexity of O(n log n), and it's not difficult to implement.

## User Interface:

The user interface will be a simple command-line interface where the user will be prompted with various options to interact with the collection. These will include options to add a new record to the collection, remove a record from the collection, display all records in the collection, search for a specific record, and sort the collection.

## Persistent Storage:

I plan to use file input/output operations to read and write the guitar collection data to a file. This will ensure that the data is not lost when the program ends and can be retrieved when the program is started again.

## Exception Handling:

My program will handle exceptions appropriately by catching them, displaying a meaningful error message to the user, and then continuing with the next operation. This will ensure that our program doesn't crash when an exception occurs.
